
%{
#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <map>

#include "matrix.hpp"

extern int yylex();

void yyerror(std::string s) {
    std::cerr << s << std::endl;
    exit(EXIT_FAILURE);
}

std::map<std::string, Matrix> tablica;

%}

%union {
    double d;
    std::string *s;
    std::vector<double> *v;
    Matrix *m;
}

%token <s> id_token
%token <d> num_token

%type <m> M E NizVrsta
%type <v> Vrsta 

%left '+' '-'
%left '*' '.'
%nonassoc '\''

%%

Program: Naredba '\n' Program {}
    | {}
    ;

Naredba: id_token '=' E {
		tablica.insert(std::make_pair(*$1, *$3));
        std::cout << *$1 << " =" << std::endl << *$3;
        delete $1;
        delete $3;
    }
    | id_token '=' E ';' {
		tablica[*$1] = *$3; 
		tablica.insert(std::make_pair(*$1, *$3));
        delete $1;
        delete $3;
    }
    | E {
        std::cout << *$1;
        delete $1;
    }
    ;

E: E '+' E {
    try {
        $$ = new Matrix(*$1 + *$3);
    }
    catch (const char *s)
        {yyerror(s);}
    delete $1;
    delete $3;
    }
    | E '-' E {
        try
            {$$ = new Matrix(*$1 - *$3);}
        catch (const char *s)
           { yyerror(s);}
        delete $1;
        delete $3;
    }
    | E '*' E {
        try
            {$$ = new Matrix(*$1 * *$3);}
        catch (const char *s)
            {yyerror(s);}
        delete $1;
        delete $3;
    }
    | E '.' '*' E {
        try
            {$$ = new Matrix($1->coordProduct(*$4));}
        catch (const char *s)
            {yyerror(s);}
        delete $1;
        delete $4;
    }
    | E '\'' {
        $$ = new Matrix($1->transpose());
        delete $1;
    }
    | M {$$ = $1;}
    | id_token {
        std::map<std::string, Matrix>::iterator it;
        it = tablica.find(*$1);
        if(it == tablica.end())
            yyerror(*$1 + " not defined");
        $$ = new Matrix(it->second);
    }
    ;


M: '[' NizVrsta ']' { 
    $$ = $2; 
    }
    ;

NizVrsta: NizVrsta ';' Vrsta {
    $1->addRow(*$3);
    delete $3;
    $$ = $1;
    }
    | Vrsta {
        $$ = new Matrix(0,0);
        $$->addRow(*$1);
        delete $1;
    }
    ;

Vrsta: Vrsta num_token {
        $1->push_back($2);
        $$ = $1;
    }
    | num_token {
        $$ = new std::vector<double>();
        $$->push_back($1);
    }
    ;

%%

int main() {
    yyparse();
    return 0;
}